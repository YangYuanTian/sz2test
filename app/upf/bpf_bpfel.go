// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bpfConfig struct{ Ipv4Self uint32 }

type bpfStatT struct {
	TotalReceivedBytes   uint64
	TotalForwardBytes    uint64
	TotalReceivedPackets uint64
	TotalForwardPackets  uint64
}

type bpfUsrCtxDownLinkT struct {
	Template [48]int8
	Flags    uint64
}

type bpfUsrCtxUplinkT struct{ Flags uint64 }

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *bpfObjects
//     *bpfPrograms
//     *bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		fmt.Println(err.Error()+"==============================")
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
}

// bpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	XdpProgFuncN3   *ebpf.ProgramSpec `ebpf:"xdp_prog_func_n3"`
	XdpProgFuncN3n6 *ebpf.ProgramSpec `ebpf:"xdp_prog_func_n3n6"`
	XdpProgFuncN6   *ebpf.ProgramSpec `ebpf:"xdp_prog_func_n6"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	CiliumXdpScratch *ebpf.MapSpec `ebpf:"cilium_xdp_scratch"`
	ConfigPort       *ebpf.MapSpec `ebpf:"config_port"`
	DlStat           *ebpf.MapSpec `ebpf:"dl_stat"`
	N4TeidMap        *ebpf.MapSpec `ebpf:"n4_teid_map"`
	N4UeipMap        *ebpf.MapSpec `ebpf:"n4_ueip_map"`
	UlStat           *ebpf.MapSpec `ebpf:"ul_stat"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	CiliumXdpScratch *ebpf.Map `ebpf:"cilium_xdp_scratch"`
	ConfigPort       *ebpf.Map `ebpf:"config_port"`
	DlStat           *ebpf.Map `ebpf:"dl_stat"`
	N4TeidMap        *ebpf.Map `ebpf:"n4_teid_map"`
	N4UeipMap        *ebpf.Map `ebpf:"n4_ueip_map"`
	UlStat           *ebpf.Map `ebpf:"ul_stat"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.CiliumXdpScratch,
		m.ConfigPort,
		m.DlStat,
		m.N4TeidMap,
		m.N4UeipMap,
		m.UlStat,
	)
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	XdpProgFuncN3   *ebpf.Program `ebpf:"xdp_prog_func_n3"`
	XdpProgFuncN3n6 *ebpf.Program `ebpf:"xdp_prog_func_n3n6"`
	XdpProgFuncN6   *ebpf.Program `ebpf:"xdp_prog_func_n6"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.XdpProgFuncN3,
		p.XdpProgFuncN3n6,
		p.XdpProgFuncN6,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed bpf_bpfel.o
var _BpfBytes []byte
