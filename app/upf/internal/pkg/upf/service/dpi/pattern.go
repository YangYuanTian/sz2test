package dpi

import (
	"encoding/json"
	"regexp"
)

/*
------------------------------------------------------------------------------------------------------------------------------------
pattern是特征值表达式相关参数的Json字符串形式，相应的特征值表达式采用的是十六进制码流的字符串形式。如匹配http的特征值表达式为：
485454502f[\\s\\S]*(436f6e6e656374696f6e3a|436f6e74656e742d547970653a|436f6e74656e742d4c656e6774683a)
|(474554|48454144|504f5354|505554|44454c455445|434f4e4e454354|4f5054494f4e53|5452414345)[\\s\\S]*485454502f。对应的ASSII码
字符串为：HTTP/[\\s\\S]*(Connection:|Content-Type:|Content-Length:)|(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE)[\\s\\S]*HTTP/。
而有的协议的十六进制码流转换为ASSII码字符串为特殊字符，程序无法识别，所以不能用ASSII码字符串统一匹配。故采用十六进制码流的字符串形式
的特征值表达式来进行匹配。
--------------------------------------------------------------------------------------------------------------------------------------
*/
var TcpPattern = `[
    {
        "name": "http",
        "regexp": "485454502f.*(436f6e6e656374696f6e3a|436f6e74656e742d547970653a|436f6e74656e742d4c656e6774683a)|(474554|48454144|504f5354|505554|44454c455445|434f4e4e454354|4f5054494f4e53|5452414345).*485454502f",
        "allow": true
    },
    {
        "name": "rtsp",
        "regexp": "525453502f.*435365713a.*(557365722d4167656e743a|5365727665723a)",
        "allow": true
    },
    {
        "name": "ftp",
        "regexp": "^(31(3130|32(30|35)|3530))|^(32((30(30|32)|(313[1-5]))|(323([0-1]|[5-7]))|(35(0|7))))|^(33(33(31|32)|3530))|^(34(32(31|35|36)|(353[0-2])))|^(35((303[0-4])|(333(0|2))|(35[0-3])))",
        "allow": true
    },
    {
        "name": "ftp",
        "regexp": "(^55534552)|(^(41(505045|4c4c4f|424f52|434354)))|(^43445550)|(^44454c45)|(^48454c50)|(^4c495354)|(^4d4f4445)|(^4e(4c5354|4f4f50))|(^(50(41(5353|5356)|4f5254)))|(^51554954)|(^5245(494e|5354))|(^524e(4652|544f))|(^53495445)|(^53595354)|(^(5354(4f(52|55)|4154|5255)))|(^534d4e54)|(^54595045)|(^434d44)|(^505744)|(^4d4b44)|(^524d44)",
        "allow": true
    },
    {
        "name": "mqtt",
        "regexp": "((^10).*4d51)|(^2002)|(^(3([0-5]|[8-9]|[a-d])))|(^5002)|(^6202)|(^7002)|(^82)|(^90)|(^a2)|(^b002)|(^c0000)|(^d000)|(^e000)",
        "allow": true
    }
]`

var UdpPattern = `[
    {
        "name": "rtsp",
        "regexp": "525453502f.*435365713a.*(557365722d4167656e743a|5365727665723a)",
        "allow": true
    },
    {
        "name": "dns",
        "regexp": "(0|1|8|9)([0-9]|[a-f])([0-3]|[8-9]|[a-b])[0-5].*((00(0|1)([1-9]|[a-f]))|(00fc|00fd|00fe|00ff))(0001|0002|0003|0004|00ff)",
        "allow": true
    }
]`

var UrlPattern = `[
	{
        "name": "http",
        "regexp": "(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE) [\\s\\S]* HTTP/",
        "allow": true
	},
    {
        "name": "rtsp",
        "regexp": "(rtsp:|rtspu:)//[\\s\\S]* ",
        "allow": true
	}
]`

var HostPattern = `[
	{
        "name": "http",
        "regexp": "Host: [\\s\\S]*\\n",
        "allow": true
	}
]`

type Pattern struct {
	Name   string
	Regexp string
	Re     *regexp.Regexp
	Allow  bool
}

/*
=========================================================================

	函数名: GetPatternsFromStr
	参数：patternStr string                    存放正则表达式模型的字符串
	返回值：[]Pattern, error                 正则表达式模型切片
	功能：从json文件中获取正则表达式模型，存在Pattern切片中。

===========================================================================
*/
func GetPatternsFromStr(patternStr string) ([]Pattern, error) {
	patterns := make([]Pattern, 0)
	if err := json.Unmarshal([]byte(patternStr), &patterns); err != nil {
		return nil, err
	}
	return patterns, nil
}

/*
===========================================================================

	函数名: SetupRegularExps
	参数：patterns []Pattern                         正则表达式模型切片
	返回值：无
	功能：正则表达式初始化，从正则表达式模型中解析出正则表达式，用来匹配文本。

=============================================================================
*/
func SetupRegularExps(patterns []Pattern) {
	for i := 0; i < len(patterns); i++ {
		patterns[i].Re = regexp.MustCompile(patterns[i].Regexp)
	}
}
